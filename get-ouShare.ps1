#Requires -Version 3.0
function get-ouShare {

    <#
.SYNOPSIS
    Get department windows share information

.PARAMETER name
    Share name

.PARAMETER includePermissions
    Includes readGroup and readWriteGroup properties generated by quering the server that host the Share.

.PARAMETER includeSize
    Includes sizeInMb property generated by quering the server that host the Share.
 
.EXAMPLE
     get-ouShare -name utsdocs -includePermissions -includeSize  
     
.EXAMPLE
    $shares = get-oushare  
    
.EXAMPLE
    get-oushare | ? departments -like "University Technology services"
 
.OUTPUTS
    PSCustomObject
 
.NOTES
    Author:  Eric Stevens
#>

    [CmdletBinding()]
    [OutputType('PSCustomObject')]
    param (
        $name,
        [switch] $includePermissions,
        [switch] $includeSize,
        [switch] $includePath
    )

    BEGIN {
        #Used for prep. This code runs one time prior to processing items specified via pipeline input.
    }

    PROCESS {
        
        $dataSource = "ousql01\ousql01"
        $database = "IT-resoruces"

        $shareSqlCommand = "SELECT * from dbo.share"
        $shareOwnerSqlCommand = "SELECT * from dbo.shareShareOwnerJunction"
        $departmentsSqlCommand = "SELECT dbo.Department.Name, dbo.Department.department_id, dbo.DepartmentShareJunction.ShareID FROM dbo.Department INNER JOIN dbo.DepartmentShareJunction ON dbo.Department.department_id = dbo.DepartmentShareJunction.DepartmentID GROUP BY dbo.Department.Name, dbo.Department.department_id, dbo.DepartmentShareJunction.ShareID;"

        #if name is set change sqlCommand
        if ($name) {
            $shareSqlCommand = "SELECT * from dbo.share Where dbo.share.name = '$name'"
        }
        
        $connectionString = "Data Source=$dataSource; " +
        "Integrated Security=SSPI; " +
        "Initial Catalog=$database"

        $connection = new-object system.data.SqlClient.SQLConnection($connectionString)
        $command = new-object system.data.sqlclient.sqlcommand($shareSqlCommand, $connection)
        
        
        try {
    
            write-verbose "getting inforamtion from share table"
            $connection.Open()

            $reader = $command.ExecuteReader()
            $shares = @()

            while ($reader.read()) {
                $row = @{}
                for ($i = 0; $i -lt $reader.FieldCount; $i++) {
                    $row[$reader.GetName($i)] = $reader.GetValue($i)
                }
                $shares += new-object psobject -Property $row
            }

            $connection.Close()

            write-verbose "getting inforamtion from owner and share owner junction table"
            $connection = new-object system.data.SqlClient.SQLConnection($connectionString)
            $command = new-object system.data.sqlclient.sqlcommand($shareOwnerSqlCommand, $connection)
            $connection.Open()

            $reader = $command.ExecuteReader()

            $owners = @()
            while ($reader.read()) {
                $row = @{}
                for ($i = 0; $i -lt $reader.FieldCount; $i++) {
                    $row[$reader.GetName($i)] = $reader.GetValue($i)
                }
                $owners += new-object psobject -Property $row

            }

            $connection.Close()

            write-verbose "getting inforamtion from department and department junction table"
            $connection = new-object system.data.SqlClient.SQLConnection($connectionString)
            $command = new-object system.data.sqlclient.sqlcommand($departmentsSqlCommand, $connection)
            $connection.Open()

            $reader = $command.ExecuteReader()
            $departments = @()
            while ($reader.read()) {
                $row = @{}
                for ($i = 0; $i -lt $reader.FieldCount; $i++) {
                    $row[$reader.GetName($i)] = $reader.GetValue($i)
                }
                $departments += new-object psobject -Property $row

            }
            
            write-verbose "Combining the relational tables into one share object"      
            foreach ($share in $shares) {

                $shareOwners = $owners | ? {$_.shareId -eq $share.share_id} | select -ExpandProperty shareOwner
                $shareDepartments = $departments | ? {$_.ShareID -eq $share.share_id} | select -ExpandProperty name
                #$shareServer = $share.server
                try {
                    $ownerNames = $shareOwners | % {get-aduser $_ -Properties displayname} | select -ExpandProperty displayname
                }
                catch {
                    write-verbose "$shareOwners contains an account not found in active directory as a share owner." 
                }

                $share | Add-Member -NotePropertyName owner -NotePropertyValue $shareOwners
                $share | Add-Member -NotePropertyName department -NotePropertyValue $shareDepartments
                #$share | Add-Member -NotePropertyName server -NotePropertyValue $shareServer
                $share | Add-Member -NotePropertyName ownerNames -NotePropertyValue $ownerNames
                
                if ($includePermissions) {
                    $permissions = (get-ouShareACL $share.name)

                    $readGroup = @()
                    $readWriteGroup = @()
                    $fullControlGroup = @()
                    $otherGroup = @()

                    ForEach ($permission in $permissions) {
                        if ($permission.IdentityReference -like 'ADMNET\*' -and $permission.AccessControlType -eq 'Allow') {
                            switch ($permission.FileSystemRights) {
                                "ReadAndExecute, Synchronize" { $readGroup += $permission.IdentityReference -replace 'ADMNET\\', ''; break }
                                "Modify, Synchronize" { $readWriteGroup += $permission.IdentityReference -replace 'ADMNET\\', ''; break }
                                "FullControl" { $fullControlGroup += $permission.IdentityReference -replace 'ADMNET\\', ''; break }
                                Default: { $otherGroup += $permission.IdentityReference -replace 'ADMNET\\', ''; break }
                            }
                        }
                    }

                    $share | Add-Member -MemberType NoteProperty readGroup -Value $readGroup
                    $share | Add-Member -MemberType NoteProperty readWriteGroup -Value $readWriteGroup
                    $share | Add-Member -MemberType NoteProperty fullControlGroup -Value $fullControlGroup
                    $share | Add-Member -MemberType NoteProperty otherGroup -Value $otherGroup

                    $sharePermissions = get-ouShareGroup $share.name 

                    $share | Add-Member -MemberType NoteProperty shareReadGroup -Value $sharePermissions.shareReadGroup
                    $share | Add-Member -MemberType NoteProperty shareChangeGroup -Value $sharePermissions.shareChangeGroup
                    $share | Add-Member -MemberType NoteProperty shareFullGroup -Value $sharePermissions.shareFullGroup
                    $share | Add-Member -MemberType NoteProperty shareOtherGroup -Value $sharePermissions.shareOtherGroup

                } 

                if ($includeSize) {
                    $sizeInMb = get-ouShareSize $share.Name
                    $share | Add-Member -NotePropertyName sizeInMb -NotePropertyValue $sizeInMb
                }

                if ($includePath) {
                    $smbShare = Invoke-Command -ComputerName $share.server -ScriptBlock {
                        param($share)
                        $ShareName = try { Get-SmbShareAccess $Share.Name -ErrorAction stop | select -ExpandProperty name} catch {$Share.Name + "$"} 
                        Get-SmbShare $shareName 
                    } -ArgumentList $share

                    $fileSystemPath = $smbShare| select -ExpandProperty path
                    $share | Add-Member -NotePropertyName fileSystemPath -NotePropertyValue $fileSystemPath

                    $fqdn = (Resolve-DnsName $share.server)[1]| select -ExpandProperty name
                    $uncPath = "\\$fqdn\$($fileSystemPath.Replace(':','$'))"
                    $share | Add-Member -NotePropertyName uncPath -NotePropertyValue $uncPath

                    $sharePath = "\\$fqdn\$($smbShare.name)"
                    $share | Add-Member -NotePropertyName sharePath -NotePropertyValue $sharePath

                    $dfsPaths = Get-DfsnFolder "\\admnet\Shares\*\$name"  | select -ExpandProperty path
                    $share | Add-Member -MemberType NoteProperty dfsPaths -Value $dfsPaths

                } 

                



                
                Write-Output $share
            }    
                
        }
        catch {
            write-error "Make sure you are running on mgmt01 and have permsions to the IT_resources database on ousql01"
            throw $_.Exception
        }
    }
    
    END {
        #Used for cleanup. This code runs one time after all of the items specified via pipeline input are processed.
    }

}